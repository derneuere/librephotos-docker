# Default values for librephotos.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
nameOverride: ''
fullnameOverride: ''

env:
  DEBUG: 0
  LOGLEVEL: info
  # Username for the Administrator login.
  ADMIN_USERNAME: admin
  # Email for the administrative user.
  ADMIN_EMAIL: admin@example.com
  # Password for the administrative user you set above.
  #  Leave blank to autogenerate, but you'll need to inspect
  #  the secret manually to get the password then
  ADMIN_PASSWORD: ''
  # Do you want to see on a map where all your photos where taken (if a location is stored in your photos)
  # Get a Map box API Key https://account.mapbox.com/auth/signup/
  MAPBOX_API_KEY: ''
  # Time zone https://docs.djangoproject.com/en/3.1/ref/settings/#std:setting-TIME_ZONE
  TIME_ZONE: 'America/Chicago'
  # This setting can dramatically affect how resource-intensive and the speed of scanning photos
  # A positive integer generally in the 2-4 x $(NUM_CORES) range.
  # Youâ€™ll want to vary this a bit to find the best for your particular workload.
  # Each worker needs 800MB of RAM. Change at your own will. Default is 2.
  WEB_CONCURRENCY: 2
  SKIP_PATTERNS: ''

postgresql:
  enabled: true
  # if enabled=false and you're using your own postgres, set the below
  externalPostgresHost: postgresql
  externalPostgresqlPort: 5432

  # the user/pass/db options below are required even if you are using external postgres, take note.
  # complete options at https://artifacthub.io/packages/helm/cetic/postgresql
  postgresql:
    username: librephotos
    password: dbpass420$1
    database: librephotos
  persistence:
    enabled: true
    # storageClass: nfs-client
    size: 5Gi

redis:
  enabled: true
  # if enabled=false and you're using your own redis, set the below
  externalRedisHost: redis
  externalRedisPort: 6379

  # otherwise, use the below to configure the in-chart redis instance
  # complete options at https://artifacthub.io/packages/helm/groundhog2k/redis
  persistence:
    enabled: true
    # storageClass: nfs-client
    size: 2Gi

backend:
  replicaCount: 1
  image:
    repository: reallibrephotos/librephotos
    pullPolicy: IfNotPresent
    tag: 'dev'
  imagePullSecrets: []

  service:
    type: ClusterIP
    port: 8001

  ingress:
    enabled: true
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /api
          - path: /media
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  podAnnotations: {}

  podSecurityContext:
    {}
    # fsGroup: 2000

  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  persistence:
    enabled: true
    # existingClaim: ""
    annotations: {}
    accessModes:
      - ReadWriteOnce
    # storageClass: nfs-client
    size: 25Gi

frontend:
  replicaCount: 1
  image:
    repository: reallibrephotos/librephotos-frontend
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: 'dev'
  imagePullSecrets: []

  service:
    type: ClusterIP
    port: 3000

  ingress:
    enabled: true
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

  podAnnotations: {}

  podSecurityContext:
    {}
    # fsGroup: 2000

  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

proxy:
  replicaCount: 1
  image:
    repository: reallibrephotos/librephotos
    pullPolicy: IfNotPresent
    tag: 'dev'
  imagePullSecrets: []

  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: true
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /api
          - path: /media
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  podAnnotations: {}

  podSecurityContext:
    {}
    # fsGroup: 2000

  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
